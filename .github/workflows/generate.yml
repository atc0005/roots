name: Update roots collection
on:
  # NOTE: Omit automatic tagging for pushes.
  # push:

  # Permit manually triggering workflow for testing.
  workflow_dispatch:

  # This is the primary means of triggering this workflow.
  schedule:
    # ┌───────────── minute (0 - 59)
    # │ ┌───────────── hour (0 - 23)
    # │ │ ┌───────────── day of the month (1 - 31)
    # │ │ │ ┌───────────── month (1 - 12 or JAN-DEC)
    # │ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
    # │ │ │ │ │
    # │ │ │ │ │
    # │ │ │ │ │
    # * * * * *
    - cron: '4 2 * * *' # daily at 2:04

permissions:
  contents: write
  actions:  write # permit triggering other workflows

jobs:
  git_describe_semver:
    name: Generate semantic release version using git-describe-semver
    runs-on: ubuntu-latest
    # Default: 360 minutes
    timeout-minutes: 5
    # https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs
    outputs:
      version: ${{ steps.git-describe-semver.outputs.version }}

    steps:
      - name: Print Docker version
        run: docker --version

      - name: Clone repo with full history
        uses: actions/checkout@v4
        with:
          # Needed in order to retrieve tags for use with semver calculations
          fetch-depth: 0

      # Mark the current working directory as a safe directory in git to
      # resolve "dubious ownership" complaints.
      #
      # https://docs.github.com/en/actions/learn-github-actions/variables#default-environment-variables
      # https://confluence.atlassian.com/bbkb/git-command-returns-fatal-error-about-the-repository-being-owned-by-someone-else-1167744132.html
      # https://github.com/actions/runner-images/issues/6775
      # https://github.com/actions/checkout/issues/766
      - name: Mark the current working directory as a safe directory in git
        # run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
        run: git config --global --add safe.directory "${PWD}"

      # https://github.com/choffmeister/git-describe-semver/pkgs/container/git-describe-semver
      # https://github.com/choffmeister/git-describe-semver/blob/v0.3.11/action.yaml
      # https://github.com/choffmeister/git-describe-semver/blob/v0.4.0/action.yaml
      # - name: Record semantic version using git-describe-semver
      #   uses: docker://ghcr.io/choffmeister/git-describe-semver:0.3.11
      #   id: git-describe-semver
      #   with:
      #     args: >-
      #       --fallback="v0.0.0"
      #       --drop-prefix=false
      #       --prerelease-prefix="dev"
      #       --prerelease-suffix=""
      #       --prerelease-timestamped="false"
      #       --format="version=<version>"
      #       $GITHUB_OUTPUT

      # - name: Record semantic version using git-describe-semver
      #   uses: docker://ghcr.io/choffmeister/git-describe-semver:0.4.0
      #   id: git-describe-semver
      #   with:
      #     args: >-
      #       --next-release patch
      #       --format="version=<version>"
      #       $GITHUB_OUTPUT

      - name: Record semantic version using git-describe-semver
        id: git-describe-semver
        run: |
          {
            docker run --rm \
                    -v "${{ github.workspace }}:/workdir" \
                    -w /workdir \
                    ghcr.io/choffmeister/git-describe-semver:0.4.0 \
                    --next-release patch \
                    --format="version=<version>"
          } >> $GITHUB_OUTPUT

      - name: Print semantic version generated by git-describe-semver
        run: |
          echo "${{ steps.git-describe-semver.outputs.version }}"

  update:
    name: Download, test, and commit changes
    needs: git_describe_semver
    runs-on: ubuntu-latest
    timeout-minutes: 10
    container:
      image: "ghcr.io/atc0005/go-ci:go-ci-oldstable"

    steps:
      # https://github.com/prompt/examples-workflow-trigger
      # https://medium.com/prompt/trigger-another-github-workflow-without-using-a-personal-access-token-f594c21373ef
      # https://stackoverflow.com/questions/75348291/how-to-trigger-github-actions-workflow-whenever-a-new-tag-was-pushed
      # https://docs.github.com/en/actions/security-for-github-actions/security-guides/automatic-token-authentication#using-the-github_token-in-a-workflow
      # https://github.com/orgs/community/discussions/27028
      # https://docs.github.com/en/developers/overview/managing-deploy-keys#deploy-keys
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Use custom SSH Deploy Key to create commits/tags & push them.
          #
          # This is done to work around restrictions associated with the
          # default GITHUB_TOKEN used to push or pull content from a
          # repository; to prevent infinite Workflow loops the tasks performed
          # with the GITHUB_TOKEN do not trigger further Workflow runs (e.g.,
          # the Workflow we're using to publish new releases).
          ssh-key: "${{ secrets.COMMIT_KEY }}"

      # Mark the current working directory as a safe directory in git to
      # resolve "dubious ownership" complaints.
      #
      # https://docs.github.com/en/actions/learn-github-actions/variables#default-environment-variables
      # https://confluence.atlassian.com/bbkb/git-command-returns-fatal-error-about-the-repository-being-owned-by-someone-else-1167744132.html
      # https://github.com/actions/runner-images/issues/6775
      # https://github.com/actions/checkout/issues/766
      - name: Mark the current working directory as a safe directory in git
        # run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
        run: git config --global --add safe.directory "${PWD}"

      - name: Regenerate certificate data from upstream CCADB reports
        run: go generate

      - name: Archive files
        run: |-
          mv -v *.csv mozilla_reports/
          mv -v *.pem certificates/
          mv -v *.txt hashes/

      - name: Run tests
        run: go test -race ./...

      - name: Configure Git author settings
        run: |-
          git config user.name "GitHub Actions"
          git config user.email "actions@users.noreply.github.com"

      - name: Print Git author settings
        run: |-
          git config --get user.name
          git config --get user.email

      - name: Commit and push if changed
        env:
          NEXT_TAG: ${{ needs.git_describe_semver.outputs.version }}
        run: |-
          echo "Attempting to stage relevant content for a new release."
          git add certificates
          git add hashes
          git add count.go

          if git diff --staged --quiet; then
            echo "No relevant changes staged. Skipping commit."
          else
            echo "Relevant content for a new release has been staged."
            echo "Staging source Mozilla report files also for auditing purposes."
            git add mozilla_reports
            git commit -m "roots: update certificates"

            echo "Creating new tag: ${NEXT_TAG}."
            bash create-tag.sh "${NEXT_TAG}"

            echo "Pushing commit."
            git push

            echo "Pushing new tag."
            git push --tags
          fi
